<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:sqs="http://www.mulesoft.org/schema/mule/sqs"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/sqs http://www.mulesoft.org/schema/mule/sqs/current/mule-sqs.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd">
    <db:generic-config name="Generic_Database_Configuration" doc:name="Generic Database Configuration" driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver" url="${dmo.test.db.url}"/>
    <http:listener-config name="HTTP_Listener_Configuration1" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <flow name="demoFlow">
        <http:listener config-ref="HTTP_Listener_Configuration1" path="/demotest" doc:name="HTTP"/>
        <logger level="INFO" doc:name="Logger"/>
        <db:insert config-ref="Generic_Database_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[slelect * from test;]]></db:parameterized-query>
        </db:insert>
        <logger level="INFO" doc:name="Logger"/>
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy doc:name="Catch Dataabase Exception" when="((exception.causedBy(com.microsoft.sqlserver.jdbc.SQLServerException)) || exception.getMessage().contains('Cannot get connection for URL')) )">
                <logger message="#['Database error']" level="INFO" doc:name="Logger"/>
                <set-variable variableName="demoStartFlow" value="#['demoFlow']" doc:name="setProcessName"/>
                <flow-ref name="demoStopFlow" doc:name="demoStopFlow"/>
            </catch-exception-strategy>
            <catch-exception-strategy doc:name="Catch All Exception">
                <logger message="#['Other errors']" level="INFO" doc:name="Logger"/>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>

 <flow name="demoStopFlow" processingStrategy="synchronous">
        <logger message="#['Suspend process started..']" level="INFO" doc:name="Logger"/>

        <choice doc:name="Choice">
            <when expression="${demo.test.isdb.stop}=='true'">
                <scripting:component doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[if(muleContext.registry.lookupFlowConstruct(flowVars.demoStartFlow).isStarted() && demo.test.isdb.stop=='true')
{
muleContext.registry.lookupFlowConstruct(flowVars.demoStartFlow).stop();
flowVars.pubSuspendstatus=flowVars.demoStartFlow+' Suspended now ';
}
else
{
flowVars.pubSuspendstatus='Process already suspended';
}]]></scripting:script>
                </scripting:component>

                <expression-component doc:name="clearSuspendFlag"><![CDATA[flowVars.isDBErrorSuspend='empty';
flowVars.isMQErrorSuspend='empty';
flowVars.isSFTPErrorSuspend='empty';]]></expression-component>
            </when>
            <otherwise>
                <logger message="#['Not meet with the specified condition..']" level="INFO" doc:name="Logger"/>


            </otherwise>
        </choice>
        <logger message="#['process completed']" level="INFO" doc:name="Logger"/>

    </flow>
    <flow name="demoStartFlow" processingStrategy="synchronous">
        <jms:inbound-endpoint queue="${demo.test.resume.queue}" connector-ref="Active_MQ" doc:name="JMS"/>
        <set-variable variableName="auditflagpub" value="${.flag}" doc:name="setAuditFlagPub"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[if(muleContext.registry.lookupFlowConstruct('demoFlow').isStopped())
{
muleContext.registry.lookupFlowConstruct('demoFlow').start();
flowVars.pubSuspendstatus='Process started now.';
}
else
{

flowVars.pubSuspendstatus='Processs already started';
}]]></scripting:script>
        </scripting:component>
        <expression-component doc:name="ExecutionPointAndLogMsg"><![CDATA[flowVars.logExecutionPoint="Execution end point of mdsLocHieri1i3PublisherResumeFlow.";
flowVars.loggingMessage="process has been resumed status: "+ flowVars.pubSuspendstatus;]]></expression-component>
    </flow>
</mule>